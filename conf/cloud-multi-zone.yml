# Cloud Multi-Zone Configuration
# This configuration demonstrates how to handle multiple zones and regions across cloud providers

global:
    worker_processes: auto
    user: nobody
    group: nobody

pools:
    # Primary Zone - High Performance
    primary_redis:
        listen: 127.0.0.1:6378
        redis: true
        
        # Aggressive latency optimization for primary zone
        latency_routing: true
        latency_weight: 80                    # Strong preference for fastest
        dns_resolve_interval: 10              # Frequent updates for primary
        
        # Zone optimization within primary region
        zone_aware: true
        zone_weight: 40                       # High same-zone preference
        zone_latency_threshold: 30000         # 30ms threshold for tight zones
        cache_mode: true
        
        # High-performance connection settings
        connection_pooling: true
        connection_warming: 3                 # Multiple warm connections
        connection_idle_timeout: 180          # Shorter timeout for high turnover
        
        # Enhanced health monitoring
        dns_failure_threshold: 1              # Very strict health requirements
        dns_cache_negative_ttl: 5             # Quick recovery
        
        # Primary zone cluster
        servers:
            - primary-redis-ro.cache.example.com:6379:1
    
    # Secondary Zone - Disaster Recovery
    secondary_redis:
        listen: 127.0.0.1:6388
        redis: true
        
        # More balanced approach for secondary zone
        latency_routing: true
        latency_weight: 50                    # Even distribution
        dns_resolve_interval: 30              # Less frequent updates
        
        # Cross-zone optimization
        zone_aware: true
        zone_weight: 60                       # Higher zone preference for cross-region
        zone_latency_threshold: 100000        # 100ms threshold for remote zones
        cache_mode: true
        
        # Conservative connection settings
        connection_pooling: true
        connection_warming: 1
        connection_idle_timeout: 600          # Longer timeout for backup region
        
        # Relaxed health requirements
        dns_failure_threshold: 3
        dns_cache_negative_ttl: 30
        
        # Secondary zone cluster
        servers:
            - secondary-redis-ro.cache.example.com:6379:1
    
    # Local Development (bypasses cloud features)
    local_redis:
        listen: 127.0.0.1:6390
        redis: true
        
        # Minimal cloud features for local development
        latency_routing: false
        zone_aware: false
        cache_mode: false
        connection_pooling: false
        
        # Local Redis instance
        servers:
            - 127.0.0.1:6379:1

    # Hybrid Environment (Cloud + On-Premise)
    hybrid_redis:
        listen: 127.0.0.1:6391
        redis: true
        
        # Moderate latency optimization
        latency_routing: true
        latency_weight: 60
        dns_resolve_interval: 45
        
        # Partial zone optimization (may have non-cloud servers)
        zone_aware: true
        zone_weight: 20                       # Lower weight for mixed environment
        zone_latency_threshold: 75000         # 75ms threshold for hybrid zones
        cache_mode: false                     # Mixed environment
        
        # Standard connection settings
        connection_pooling: true
        connection_warming: 1
        connection_idle_timeout: 300
        
        # Multiple server types
        servers:
            - managed-cache.cloud.example.com:6379:1      # Cloud managed
            - redis-onprem-1.company.com:6379:1           # On-premise
            - redis-onprem-2.company.com:6379:1           # On-premise

    # Multi-Zone with TLS
    secure_multizone:
        listen: 127.0.0.1:6392
        redis: true
        
        # Standard latency routing
        latency_routing: true
        latency_weight: 70
        zone_aware: true
        cache_mode: true
        
        # TLS configuration
        tls_enabled: true                     # Enable TLS encryption
        tls_verify_peer: true                 # Verify certificates
        
        # TLS-enabled cluster
        servers:
            - secure-cache-ro.example.com:6380:1

    # Edge Deployment (Multiple Regions)
    edge_redis:
        listen: 127.0.0.1:6393
        redis: true
        
        # Optimize for edge latency
        latency_routing: true
        latency_weight: 90                    # Very strong preference for closest
        dns_resolve_interval: 60              # Edge endpoints change infrequently
        
        # Global zone awareness
        zone_aware: true
        zone_weight: 70                       # Very high preference for local edge
        zone_latency_threshold: 200000        # 200ms threshold for global edges
        cache_mode: true
        
        # Edge-optimized connections
        connection_pooling: true
        connection_warming: 1
        connection_idle_timeout: 1800         # 30 minutes for edge connections
        
        # Global edge endpoints
        servers:
            - edge-cache-1.global.example.com:6379:1
            - edge-cache-2.global.example.com:6379:1