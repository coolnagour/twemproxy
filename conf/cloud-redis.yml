# Cloud Redis Optimized Configuration
# This configuration demonstrates optimal settings for managed Redis clusters across cloud providers

global:
    worker_processes: auto
    user: nobody
    group: nobody

pools:
    # Managed Redis Read Pool with Zone Awareness
    redis_read:
        listen: 127.0.0.1:6378
        redis: true
        
        # Core latency-based routing
        latency_routing: true
        latency_weight: 60                    # 60% to fastest server, 40% distributed
        dns_resolve_interval: 15              # Managed caches can scale frequently
        
        # Cloud zone optimizations
        zone_aware: true                      # Enable zone-aware routing
        zone_weight: 30                       # +30% weight bonus for same-zone servers
        zone_latency_threshold: 50000         # 50ms threshold for zone detection
        cache_mode: true                      # Enable managed cache optimizations
        
        # Enhanced DNS and health settings
        dns_failure_threshold: 2              # Lower threshold for faster failover
        dns_cache_negative_ttl: 10            # Quick retry on DNS failures
        
        # Connection optimization
        connection_pooling: true              # Enable connection pooling
        connection_warming: 1                 # Pre-warm 1 connection per server
        connection_idle_timeout: 300          # Close idle connections after 5 min
        
        # Managed Redis cluster endpoint (automatically discovers read replicas)
        servers:
            - redis-cluster-ro.cache.example.com:6379:1
    
    # Redis Write Pool (primary endpoint)
    redis_write:
        listen: 127.0.0.1:6379
        redis: true
        
        # Keep writes simple - no load balancing for primary
        latency_routing: false
        
        # Zone optimizations for writes
        zone_aware: true
        connection_pooling: true
        connection_warming: 2                 # More connections for writes
        
        # Primary cluster endpoint
        servers:
            - redis-cluster.cache.example.com:6379:1

    # Secure Redis with TLS (in-transit encryption)
    redis_secure:
        listen: 127.0.0.1:6380
        redis: true
        
        # Latency routing with security
        latency_routing: true
        latency_weight: 50
        zone_aware: true
        cache_mode: true
        
        # TLS configuration
        tls_enabled: true                     # Enable TLS encryption
        tls_verify_peer: true                 # Verify server certificates
        
        # Secure cluster endpoint (port 6380 for TLS)
        servers:
            - secure-redis-ro.cache.example.com:6380:1